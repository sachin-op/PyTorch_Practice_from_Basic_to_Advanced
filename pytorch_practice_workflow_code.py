# -*- coding: utf-8 -*-
"""Pytorch_Practice_Workflow_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1onR0hpfHwtVkmWWkhAHqPgwhJgQEzYO2

# PyTorch Workflow


Resource:

* Book version of notebook:-https://www.learnpytorch.io/01_pytorch_workflow/
"""

import torch
from torch import nn # nn contains all of PyTorch's building blocks for neural networks
import matplotlib.pyplot as plt

# Check PyTorch version
torch.__version__

"""## 1.Data(preparing and loading)

Data can be almost anything... in machine learning.

* Excel speadsheet
* Images
* Videos (YouTube has lots of data...)
* Audio like songs or podcasts
* DNA
* Text

Machine learning is a game of two parts:
1. Get data into a numberical representation.
2. Build a model to learn patterns in that numerical representation.

To showcase this, let's create some *known* data using the linear regression formula.

We'll use a linear regression formula to make a straight line with known parameters.
"""

# Create *known* parameters
weight = 0.7
bias = 0.3

# Create
start = 0
end = 1
step = 0.02
X = torch.arange(start, end, step).unsqueeze(dim=1)
y = weight * X + bias

X[:10], y[:10]

len(X),len(y)

"""### Splitting data into training and testing sets
* Now we're going to move towards building a model that can learn the relationship between X (features) and y (labels).
"""

#create a train/test split
train_split = int(0.8 * len(X)) # 80% of data used for training set, 20% for testing
X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]

len(X_train), len(y_train), len(X_test), len(y_test)

"""* The model we create is going to try and learn the relationship between `X_train` & `y_train` and then we will evaluate what it learns on `X_test` and `y_test`."""

def plot_predictions(train_data=X_train,
                     train_labels=y_train,
                     test_data=X_test,
                     test_labels=y_test,
                     predictions=None):

  """
  Plots training data, test data and compares predictions.
  """
  plt.figure(figsize=(10, 7))

  #Plot training data in blue
  plt.scatter(train_data, train_labels, c="b", s=4, label="Training data")

  #Plot test data in green
  plt.scatter(test_data, test_labels, c="g", s=4, label="Testing data")

  #Are there predictions?
  if predictions is not None:
    #Plot predictions in red (predictions in  orange)
    plt.scatter(test_data, predictions, c="r", s=4, label="Predictions")
  # Show the legend
  plt.legend(prop={"size": 14});

plot_predictions();

"""## 2. Build model


What our model does:
* Start with random values (weight & bias)
* Look at training data and adjust the random values to better represent (or get closer to) the ideal values (the weight & bias values we used to create the data)

How does it do so?

Through two main algorithms:
1. Gradient descent-https://youtu.be/IHZwWFHWa-w?si=5KhGAjCA2Px2tLdw
2. Backpropagation-https://youtu.be/Ilg3gGewQ5U?si=RUKUXjpmLDfcI2Bx

"""

# Create linear regression model class
class LinearRegressionModel(nn.Module): # <- almost everything in PyTorch is a nn.Module (think of this as neural network lego blocks)
  def __init__(self):
    super().__init__()
    self.weights = nn.Parameter(torch.randn(1, # <- start with random weights (this will get adjusted as the model learns)
                                               requires_grad=True, # <- can we update this value with gradient descent?
                                               dtype=torch.float))
    self.bias = nn.Parameter(torch.randn(1,
                                            requires_grad=True,
                                            dtype=torch.float))
    # Forward method to define the computation in the model.
  def forward(self, x: torch.Tensor) -> torch.Tensor: # <- "x" is the input data (e.g. training/testing features)
    return self.weights * x + self.bias # <- this is the linear regresssion formula

"""### PyTorch model building essentials
**PyTorch has four (give or take) essential modules you can use to create almost any kind of neural network you can imagine.**

* torch.nn - contains all of the building for computational graphs (a neural network can be considered a computational)
* torch.nn.Parameter - What parameters should our model try and learn,often a PyTorch layer from torch.nn will set these for us
* torch.nn.Module - The base class for all neural network modules, if you subclass it,you should overwrite forward()
* torch.optim-This where the optimizers in PyTorch live, they will help with gradient descent
* def forward() - All nn.Module subclasses require you to overwrite
forward(), this method defines what happens in the forward computation

see more of these essential modules via the PyTorch cheatsheet https://docs.pytorch.org/tutorials/beginner/ptcheat.html


* [torch.nn](https://docs.pytorch.org/docs/stable/nn.html),

* [torch.optim](https://docs.pytorch.org/docs/stable/optim.html),

* [torch.nnModule](https://docs.pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module),

* [torch.nn.Parameter](https://docs.pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#parameter)
"""

torch.randn(1)

"""### Checking the contents of our PyTorch model

Now we've created a model,let's see what's inside...

So we can check our model parameters or what's inside our model using ...
`.parameters().`
"""

# Create a random seed
torch.manual_seed(42)

#Create a LinearRegressionModel
model_0 = LinearRegressionModel()

# Check the model parameters
list(model_0.parameters())

# List named parameters
model_0.state_dict()

weight, bias

"""### Making prediction using `torch.inference_mode()`

To check our model's predictive power, let's see how well it predicts `y_test` based on `X_test`.

when we pass data through out model, it's going to run it through the `forward()` method.
"""

X_test, y_test

# # make predictions with model
with torch.inference_mode():
  y_preds = model_0(X_test)

# # you can also do something similar with torch.no_grad(),however,torch.inference_model() is preferred
# with torch.no_grad():
#   y_preds = model_0(X_test)

y_preds

# Check the predictions
print(f"Number of testing samples: {len(X_test)}")
print(f"Number of predictions made: {len(y_preds)}")
print(f"Predicted values:\n{y_preds}")

plot_predictions(predictions=y_preds)

y_test - y_preds

"""## 3. Train model

The whole idea of training is for a model to move from some *unknown* parameters (these may be random) to some *known* parameters.

or in other words from a poor representation of the data to a better representation of the data.

One way to measure how poor or how wrong your models predictions are is to use a loss function.

* Note: Loss function may also be called cost function or criterion in different areas. For our case,we're going to refer to it as a loss function.

*  **Loss Function:** A function to measure measure how wrong your models prediction are to the ideal outputs, lower is better.

* **Optimizer:** Takes into account the loss of a model and adjusts the model's parameters(e.g weight & bias)

parameters (e.g. weight & bias in our case) to improve the loss function.

And specifically for PyTorch, we need:
* A training loop
* A testing loop
"""

list(model_0.parameters())

model_0.state_dict()

# Create the loss function
loss_fn = nn.L1Loss() # MAE loss is same as L1Loss

# Create the optimizer
optimizer = torch.optim.SGD(params=model_0.parameters(), # parameters of target model to optimize
                            lr=0.01) # learning rate (how much the optimizer should change parameters at each step, higher=more (less stable), lower=less (might take a long time))

"""### PyTorch Training Loop

For the training loop, we'll build the following steps:

| **Number** | **Step name**                                | **What does it do?**                                                                                                                                   | **Code example**                        |
|------------|-----------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------|
| 1          | Forward pass                                  | The model goes through all of the training data once, performing its `forward()` function calculations.                                               | `model(x_train)`                        |
| 2          | Calculate the loss                             | The model's outputs (predictions) are compared to the ground truth and evaluated to see how wrong they are.                                           | `loss = loss_fn(y_pred, y_train)`       |
| 3          | Zero gradients                                 | The optimizer's gradients are set to zero (they are accumulated by default) so they can be recalculated for the specific training step.              | `optimizer.zero_grad()`                 |
| 4          | Perform backpropagation on the loss            | Computes the gradient of the loss with respect for every model parameter to be updated (`requires_grad=True`). This is known as **backpropagation**. | `loss.backward()`                       |
| 5          | Update the optimizer (**gradient descent**)    | Update the parameters with `requires_grad=True` with respect to the loss gradients in order to improve them.                                         | `optimizer.step()`                      |

### PyTorch Testing Loop

As for the testing loop (evaluating our model), the typical steps include:

| **Number** | **Step name**                              | **What does it do?**                                                                                                                               | **Code example**                |
|------------|---------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------|
| 1          | Forward pass                                | The model goes through all of the testing data once, performing its `forward()` function calculations.                                             | `model(x_test)`                |
| 2          | Calculate the loss                          | The model's outputs (predictions) are compared to the ground truth and evaluated to see how wrong they are.                                        | `loss = loss_fn(y_pred, y_test)`|
| 3          | Calculate evaluation metrics *(optional)*   | Alongside the loss value, you may want to calculate other evaluation metrics such as accuracy on the test set.                                    | Custom functions                |

> **Note:**  
> The testing loop doesn't include backpropagation (`loss.backward()`) or optimizer stepping (`optimizer.step()`) because model parameters are not being updated.  
> We're only interested in evaluating the model's performance.
"""

model_0.parameters()

torch.manual_seed(42)

# Set the number of epochs (how many times the model will pass over the training data)
epochs = 100

# Create empty loss lists to track values
train_loss_values = []
test_loss_values = []
epoch_count = []

for epoch in range(epochs):
    ### Training

    # Put model in training mode (this is the default state of a model)
    model_0.train()

    # 1. Forward pass on train data using the forward() method inside
    y_pred = model_0(X_train)
    # print(y_pred)

    # 2. Calculate the loss (how different are our models predictions to the ground truth)
    loss = loss_fn(y_pred, y_train)

    # 3. Zero grad of the optimizer
    optimizer.zero_grad()

    # 4. Loss backwards
    loss.backward()

    # 5. Progress the optimizer
    optimizer.step()

    ### Testing

    # Put the model in evaluation mode
    model_0.eval()

    with torch.inference_mode():
      # 1. Forward pass on test data
      test_pred = model_0(X_test)

      # 2. Caculate loss on test data
      test_loss = loss_fn(test_pred, y_test.type(torch.float)) # predictions come in torch.float datatype, so comparisons need to be done with tensors of the same type

      # Print out what's happening
      if epoch % 10 == 0:
            epoch_count.append(epoch)
            train_loss_values.append(loss.detach().numpy())
            test_loss_values.append(test_loss.detach().numpy())
            print(f"Epoch: {epoch} | MAE Train Loss: {loss} | MAE Test Loss: {test_loss} ")

# Plot the loss curves
plt.plot(epoch_count, train_loss_values, label="Train loss")
plt.plot(epoch_count, test_loss_values, label="Test loss")
plt.title("Training and test loss curves")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.legend();

# Find our model's learned parameters
print("The model learned the following values for weights and bias:")
print(model_0.state_dict())
print("\nAnd the original values for weights and bias are:")
print(f"weights: {weight}, bias: {bias}")

"""
## 4. Making predictions with a trained PyTorch model (inference)"""

# 1. Set the model to evaluation mode
# This disables layers like dropout and batchnorm which behave differently during training
model_0.eval()

# 2. Inference mode context manager
# This turns off gradient tracking for faster and more memory-efficient computations
with torch.inference_mode():

    # 3. (Optional but recommended) Ensure the model and data are on the same device
    # Example if using device-agnostic code:
    # model_0.to(device)
    # X_test = X_test.to(device)

    # Make predictions
    y_preds = model_0(X_test)

# 4. (Optional) View predictions
print(y_preds)

# 5. (Optional) Visualize predictions vs actual values
# This assumes you have a function called `plot_predictions` already defined
plot_predictions(predictions=y_preds)

"""## 5.PyTorch Model Saving & Loading Guide
Saving and loading models is useful when:

* You want to pause and resume training later.

* You want to export your model for inference elsewhere.

* You want to reuse a trained model without retraining.

PyTorch recommends saving only the state_dict() (i.e., learned weights) for flexibility and portability.

| **PyTorch Method**                        | **What does it do?**                                                                                                                                                      |
|------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `torch.save`                              | Saves a serialized object to disk using Python's `pickle` utility. Models, tensors, and other Python objects (like dictionaries) can be saved using `torch.save()`.       |
| `torch.load`                              | Uses `pickle`'s unpickling to deserialize and load pickled Python objects (like models, tensors, or dictionaries) into memory. Can load to a specific device (CPU/GPU).   |
| `torch.nn.Module.load_state_dict()`       | Loads a model's parameter dictionary (`model.state_dict()`) using a saved `state_dict()` object.                                                                          |

> **Note**: Only load (`torch.load`) models from trusted sources. Pickle is not secure and can execute arbitrary code on loading.

Saving a Model's `state_dict()`
"""

# 1. Create a directory to save models
from pathlib import Path
MODEL_PATH = Path("models")
MODEL_PATH.mkdir(parents=True, exist_ok=True)

# 2. Define model save path
MODEL_NAME = "01_pytorch_workflow_model_0.pth"
MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME

# 3. Save the model's state_dict() (recommended method)
print(f"Saving model to: {MODEL_SAVE_PATH}")
torch.save(obj=model_0.state_dict(), f=MODEL_SAVE_PATH)

# 4. (Optional) Check if the file is saved
!ls -lh models/

"""Loading a Saved `state_dict()`"""

# 1. Create a new instance of the model
loaded_model_0 = LinearRegressionModel()

# 2. Load the saved state_dict() into the new model
loaded_model_0.load_state_dict(torch.load(f=MODEL_SAVE_PATH))

# 3. Set the model to eval mode before inference
loaded_model_0.eval()

# 4. Inference (make predictions)
with torch.inference_mode():
    loaded_model_preds = loaded_model_0(X_test)  # X_test must be defined earlier

"""Confirm the Predictions Match"""

# Compare predictions from original and loaded models
print(torch.equal(y_preds, loaded_model_preds))  # Should return True if saved/loaded correctly

"""## 6.1Data"""

# Create weight and bias
weight = 0.7
bias = 0.3

# Create range values
start = 0
end = 1
step = 0.02

# Create X and y (features and labels)
X = torch.arange(start, end, step).unsqueeze(dim=1) # without unsqueeze, errors will happen later on (shapes within linear layers)
y = weight * X + bias
X[:10], y[:10]

# Split data
train_split = int(0.8 * len(X))
X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]

len(X_train), len(y_train), len(X_test), len(y_test)

# Note: If you've reset your runtime, this function won't work,
# you'll have to rerun the cell above where it's instantiated.
plot_predictions(X_train, y_train, X_test, y_test)

"""## 6.2Building a PyTorch linear model"""

# Subclass nn.Module to make our model
class LinearRegressionModelV2(nn.Module):
    def __init__(self):
        super().__init__()
        # Use nn.Linear() for creating the model parameters
        self.linear_layer = nn.Linear(in_features=1,
                                      out_features=1)

    # Define the forward computation (input data x flows through nn.Linear())
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return self.linear_layer(x)

# Set the manual seed when creating the model (this isn't always needed but is used for demonstrative purposes, try commenting it out and seeing what happens)
torch.manual_seed(42)
model_1 = LinearRegressionModelV2()
model_1, model_1.state_dict()

# Check model device
next(model_1.parameters()).device

# Set model to GPU if it's available, otherwise it'll default to CPU
model_1.to(device) # the device variable was set above to be "cuda" if available or "cpu" if not
next(model_1.parameters()).device

# Check for GPU
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device: {device}")

"""## 6.3 Training

Now it's time to build a raining and testing loop. Fierst we'll need a loss function and an optimizer.
"""

# Create loss function
loss_fn = nn.L1Loss()

# Create optimizer
optimizer = torch.optim.SGD(params=model_1.parameters(), # optimize newly created model's parameters
                            lr=0.01)

"""Now let's train and evaluate our model using a training and testing loop."""

torch.manual_seed(42)

# Set the number of epochs
epochs = 1000

# Put data on the available device
# Without this, error will happen (not all model/data on device)
X_train = X_train.to(device)
X_test = X_test.to(device)
y_train = y_train.to(device)
y_test = y_test.to(device)

for epoch in range(epochs):
    ### Training
    model_1.train() # train mode is on by default after construction

    # 1. Forward pass
    y_pred = model_1(X_train)

    # 2. Calculate loss
    loss = loss_fn(y_pred, y_train)

    # 3. Zero grad optimizer
    optimizer.zero_grad()

    # 4. Loss backward
    loss.backward()

    # 5. Step the optimizer
    optimizer.step()

    ### Testing
    model_1.eval() # put the model in evaluation mode for testing (inference)
    # 1. Forward pass
    with torch.inference_mode():
        test_pred = model_1(X_test)

        # 2. Calculate the loss
        test_loss = loss_fn(test_pred, y_test)

    if epoch % 100 == 0:
        print(f"Epoch: {epoch} | Train loss: {loss} | Test loss: {test_loss}")

"""Now Let's check the parameters our model has learned and compare them to the original parameters we hard-coded."""

# Find our model's learned parameters
from pprint import pprint # pprint = pretty print, see: https://docs.python.org/3/library/pprint.html
print("The model learned the following values for weights and bias:")
pprint(model_1.state_dict())
print("\nAnd the original values for weights and bias are:")
print(f"weights: {weight}, bias: {bias}")

"""## 6.4 Making predictions

Now we've got a trained model, let's turn on it's evaluation mode and make some predictions.

"""

# Turn model into evaluation mode
model_1.eval()

# Make predictions on the test data
with torch.inference_mode():
    y_preds = model_1(X_test)
y_preds

# plot_predictions(predictions=y_preds) # -> won't work... data not on CPU

# Put data on the CPU and plot it
plot_predictions(predictions=y_preds.cpu())

"""## 6.5 Saving and loading a model
**Why Save a Model?**

To reuse a trained model later for:

* Making predictions

* Deployment in applications

* Resuming training

Recommended Way: Save & Load state_dict()

| **Step**          | **What it does**                                                                 |
|-------------------|----------------------------------------------------------------------------------|
| `torch.save()`     | Saves the model's parameters (`state_dict()`) to a file.                        |
| `torch.load()`     | Loads the parameters back into memory.                                          |
| `load_state_dict()`| Updates a model with saved parameters.                                          |
| `model.to(device)` | Ensures model is on same device as the data (CPU or GPU).                      |
| `eval()` + `inference_mode()` | Turns off training behaviors and gradients to make fast predictions. |
"""

from pathlib import Path

# 1. Create models directory
MODEL_PATH = Path("models")
MODEL_PATH.mkdir(parents=True, exist_ok=True)

# 2. Create model save path
MODEL_NAME = "01_pytorch_workflow_model_1.pth"
MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME

# 3. Save the model state dict
print(f"Saving model to: {MODEL_SAVE_PATH}")
torch.save(obj=model_1.state_dict(), # only saving the state_dict() only saves the models learned parameters
           f=MODEL_SAVE_PATH)

"""2. Load the Saved Model"""

# Create a new instance of the model class
loaded_model_1 = LinearRegressionModelV2()

# Load the saved parameters into the new model
loaded_model_1.load_state_dict(torch.load(MODEL_SAVE_PATH))

# Send model to the same device as your data (CPU or GPU)
loaded_model_1.to(device)

# Print summary
print(f"Loaded model:\n{loaded_model_1}")
print(f"Model on device:\n{next(loaded_model_1.parameters()).device}")

"""3. Inference with Loaded Model"""

# Set model to evaluation mode
loaded_model_1.eval()

# Use inference mode (no gradient calculation)
with torch.inference_mode():
    loaded_model_1_preds = loaded_model_1(X_test)

# Compare with original predictions
print(y_preds == loaded_model_1_preds)

